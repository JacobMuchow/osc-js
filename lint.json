[
  {
    "name": "EventHandler#notify",
    "filePath": "src/events.js",
    "lines": [
      {
        "lineNumber": 165,
        "line": "  /**"
      },
      {
        "lineNumber": 166,
        "line": "   * Notify the EventHandler of incoming OSC messages or status"
      },
      {
        "lineNumber": 167,
        "line": "   * changes (*open*, *close*, *error*). Handles OSC address patterns"
      },
      {
        "lineNumber": 168,
        "line": "   * and executes timed messages. Use binary arrays when"
      },
      {
        "lineNumber": 169,
        "line": "   * handling directly incoming network data. Packet's or Messages can"
      },
      {
        "lineNumber": 170,
        "line": "   * also be used"
      },
      {
        "lineNumber": 171,
        "line": "   * @param {...*} args"
      },
      {
        "lineNumber": 172,
        "line": "   * The OSC address pattern / event name as string}. For convenience and"
      },
      {
        "lineNumber": 173,
        "line": "   * Plugin API communication you can also use Message or Packet instances"
      },
      {
        "lineNumber": 174,
        "line": "   * or ArrayBuffer, Buffer instances (low-level access). The latter will"
      },
      {
        "lineNumber": 175,
        "line": "   * automatically be unpacked"
      },
      {
        "lineNumber": 176,
        "line": "   * When using a string you can also pass on data as a second argument"
      },
      {
        "lineNumber": 177,
        "line": "   * (any type). All regarding listeners will be notified with this data."
      },
      {
        "lineNumber": 178,
        "line": "   * As a third argument you can define a javascript timestamp (number or"
      },
      {
        "lineNumber": 179,
        "line": "   * Date instance) for timed notification of the listeners."
      },
      {
        "lineNumber": 180,
        "line": "   * @param {*} [rinfo] Remote address info"
      },
      {
        "lineNumber": 181,
        "line": "   * @return {boolean} Success state of notification"
      },
      {
        "lineNumber": 182,
        "line": "   *"
      },
      {
        "lineNumber": 183,
        "line": "   * @example"
      },
      {
        "lineNumber": 184,
        "line": "   * const socket = dgram.createSocket('udp4')"
      },
      {
        "lineNumber": 185,
        "line": "   * socket.on('message', (message) => {"
      },
      {
        "lineNumber": 186,
        "line": "   *   this.notify(message)"
      },
      {
        "lineNumber": 187,
        "line": "   * })"
      },
      {
        "lineNumber": 188,
        "line": "   *"
      },
      {
        "lineNumber": 189,
        "line": "   * @example"
      },
      {
        "lineNumber": 190,
        "line": "   * this.notify('error', error.message)"
      },
      {
        "lineNumber": 191,
        "line": "   *"
      },
      {
        "lineNumber": 192,
        "line": "   * @example"
      },
      {
        "lineNumber": 193,
        "line": "   * const message = new OSC.Message('/test/path', 55)"
      },
      {
        "lineNumber": 194,
        "line": "   * this.notify(message)"
      },
      {
        "lineNumber": 195,
        "line": "   *"
      },
      {
        "lineNumber": 196,
        "line": "   * @example"
      },
      {
        "lineNumber": 197,
        "line": "   * const message = new OSC.Message('/test/path', 55)"
      },
      {
        "lineNumber": 198,
        "line": "   * // override timestamp"
      },
      {
        "lineNumber": 199,
        "line": "   * this.notify(message.address, message, Date.now() + 5000)"
      },
      {
        "lineNumber": 200,
        "line": "   */"
      },
      {
        "lineNumber": 201,
        "line": "  notify(...args) {"
      }
    ],
    "codeParams": [
      "args"
    ],
    "docParams": [
      "args",
      "rinfo"
    ]
  }
]